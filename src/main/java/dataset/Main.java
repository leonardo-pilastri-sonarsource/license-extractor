package dataset;

import com.fasterxml.jackson.databind.ObjectMapper;
import dataset.toplibdef.Lib;
import dataset.toplibdef.Libs;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.List;
import java.util.Set;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import org.springframework.boot.json.JacksonJsonParser;

// using top 1000 libraries according to:
// https://github.com/SonarSource/sonar-security/blob/master/config/src/main/resources/config/javasecurity-autogenerated/top-libs.def.json
public class Main {

  public static final String MAVEN_HOME = System.getenv("MAVEN_HOME");
  private static final Set<String> LICENSE_KEYS = Set.of(
    "gpl-3.0", "lgpl", "LGPL", "AGPL", "gpl", "gpl-2.0", "GPL", "agpl"
  );

  record LibraryUsage(LocalArtifact artifact, int dependents, String license) implements Comparable<LibraryUsage> {
    @Override
    public int compareTo(LibraryUsage o) {
      return o.dependents - dependents;
    }
  }

  public static void main(String[] args) {
    assertNotEmpty(MAVEN_HOME, "MAVEN_HOME environment variable is not set.");
    var libs = getTopLibs();

    try (ExecutorService executor = Executors.newFixedThreadPool(8)) {
      for (Lib lib : libs) {
        executor.submit(() -> {
          var groupArtifact = lib.identifier().split(":");
          var artifact = new LocalArtifact(groupArtifact[0], groupArtifact[1], lib.version(),
            toLocalJarPath(groupArtifact[0], groupArtifact[1], lib.version()));

          var shouldTryDownload = false;
          if (downloadArtifact(artifact, shouldTryDownload)) {
            LibraryMetadata metadata = new LibraryMetadata();
            JarReader.populateLibraryMetadata(artifact, metadata);
            PomReader.populateLibraryMetadata(artifact, metadata);
            if (metadata.getRepo() != null) {
              var license = GHApi.getLicenseForRepo(metadata.getRepo());
              var stars = GHApi.getStarsForRepo(metadata.getRepo());
              if (LICENSE_KEYS.stream().anyMatch(license::contains)) {
                System.out.println(license + " , " + lib.identifier() + " , " + stars + " , " + metadata.getRepo());
              }
            } else if (metadata.getLicense() != null) {
              var license = metadata.getLicense().replace("\n", "");
              var deps = DepsDevDependents.fetchDependents(artifact);
              if (LICENSE_KEYS.stream().anyMatch(license::contains)) {
                license = LICENSE_KEYS.stream().filter(license::contains).findFirst().get();
                System.out.println(license + " , " + lib.identifier() + " , " + deps.dependentCount + " , " + lib.version());
              }
            }
          }
        });
      }
      executor.shutdown();
    }

  }

  private static List<Lib> getTopLibs() {
    ObjectMapper mapper = new ObjectMapper();
    try (InputStream is = JacksonJsonParser.class.getClassLoader().getResourceAsStream("top-libs.def.json")) {
      if (is != null) {
        Libs libs = mapper.readValue(is, Libs.class);
        return libs.topLibs();
      }
    } catch (Exception e) {
      System.out.println("Error reading top-libs.def.json: " + e.getMessage());
    }
    return List.of();
  }

  public record LocalArtifact(String groupId, String artifactId, String version, Path localPath) implements Comparable<LocalArtifact> {
    @Override
    public String toString() {
      return groupId + ":" + artifactId + ":" + version;
    }

    @Override
    public int compareTo(LocalArtifact o) {
      return VersionNumberComparator.getInstance().compare(toString(), o.toString());
    }
  }

  private static boolean downloadArtifact(LocalArtifact artifact, boolean shouldTryDownload) {
    if (!Files.exists(artifact.localPath())) {
      if (shouldTryDownload) {
        String home = System.getProperty("user.home");
        String mvnCommand = System.getProperty("os.name").toLowerCase().contains("win") ? "mvn.cmd" : "mvn";
        try {
          String mavenCentralRepo = "central::default::https://repo.maven.apache.org/maven2/";
          int exitCode = new ProcessBuilder(
            Path.of(MAVEN_HOME)
              .resolve("bin")
              .resolve(mvnCommand)
              .toString(),
            "dependency:get",
            "--quiet",
            "-DremoteRepositories=" + mavenCentralRepo,
            "-Dartifact=" + artifact,
            "-Dtransitive=false")
            .directory(new File(home, ".m2"))
            .start().waitFor();
          if (exitCode != 0) {
//          System.err.println("ERROR, download failed. Exit code: " + exitCode);
            return false;
          }
        } catch (IOException | InterruptedException e) {
//        System.err.println("Unexpected error!!");
          return false;
        }

      } else {
        return false;
      }

    }
    return true;
  }

  public static void assertNotEmpty(String value, String messageIfEmpty) {
    if (value == null || value.isEmpty()) {
      System.err.println("ERROR: " + messageIfEmpty);
      System.exit(1);
    }
  }

  private static Path toLocalJarPath(String groupId, String artifactId, String version) {
    return Path.of(System.getProperty("user.home"))
      .resolve(".m2")
      .resolve("repository")
      .resolve(groupId.replace('.', File.separatorChar))
      .resolve(artifactId)
      .resolve(version)
      .resolve(artifactId + "-" + version + ".jar");
  }

}
